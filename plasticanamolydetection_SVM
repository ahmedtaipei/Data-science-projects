{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":3209332,"sourceType":"datasetVersion","datasetId":1946896}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**Anomaly Detection for Plastic Product Defects Using the MVTec AD Dataset**","metadata":{}},{"cell_type":"markdown","source":"**1. Preparation and Scaling:**\n\n* **`load_images(folder_path)`**: This function loads images from a specified folder. It performs the following steps:\n    * Iterates through filenames in the folder.\n    * Reads each image using `cv2.imread`.\n    * Checks for successful reading and skips if an error occurs.\n    * Resizes the image to a fixed size (224x224 pixels).\n    * Normalizes pixel values by dividing by 255.0 (converting to range 0-1).\n    * Flattens the 3D image into a 1D array.\n    * Appends the flattened image to the `images` list.\n    * Returns a NumPy array containing all the flattened images.\n* **`load_test_data(test_folder_path)`**: This function loads images and labels from the test folder. It performs the following steps:\n    * Initializes empty lists for data (`X_test`) and labels (`y_test`).\n    * Iterates through subfolders (representing anomaly types) within the test folder.\n    * For each image in the subfolder:\n        * Reads the image using `cv2.imread`.\n        * Checks for successful reading and skips if an error occurs.\n        * Resizes the image to a fixed size (224x224 pixels).\n        * Normalizes pixel values by dividing by 255.0.\n        * Flattens the 3D image into a 1D array.\n        * Appends the flattened image to the `X_test` list.\n        * Assigns labels based on the subfolder name:\n            * 'good': Label 0 (normal)\n            * Other subfolders: Label 1 (anomaly)\n    * Returns NumPy arrays for both data and labels (`X_test` and `y_test`).","metadata":{}},{"cell_type":"code","source":"import os\nimport cv2\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\ndef load_images(folder_path):\n    images = []\n    for filename in os.listdir(folder_path):\n        img_path = os.path.join(folder_path, filename)\n        try:\n            img = cv2.imread(img_path)\n            if img is None:\n                print(f\"Error loading image: {img_path}\")\n                continue\n            img = cv2.resize(img, (224, 224))\n            img = img / 255.0\n            images.append(img.flatten())\n        except Exception as e:\n            print(f\"Error processing image: {img_path}, Error: {e}\")\n    return np.array(images)\n\ndef load_test_data(test_folder_path):\n    X_test = []\n    y_test = []\n    for subfolder in os.listdir(test_folder_path):\n        subfolder_path = os.path.join(test_folder_path, subfolder)\n        for filename in os.listdir(subfolder_path):\n            img_path = os.path.join(subfolder_path, filename)\n            try:\n                img = cv2.imread(img_path)\n                if img is None:\n                    print(f\"Error loading image: {img_path}\")\n                    continue\n                img = cv2.resize(img, (224, 224))\n                img = img / 255.0\n                X_test.append(img.flatten())\n                if subfolder == 'good':\n                    y_test.append(0)  # Normal\n                else:\n                    y_test.append(1)  # Anomaly\n            except Exception as e:\n                print(f\"Error processing image: {img_path}, Error: {e}\")\n    return np.array(X_test), np.array(y_test)\n\ndef analyze_data_distribution(train_images, y_test):\n    # Image shape analysis\n    image_shape = train_images[0].shape\n    print(f\"Image shape: {image_shape}\")\n\n    # Pixel value distribution\n    flattened_images = train_images.reshape(-1)\n    sns.histplot(flattened_images, bins=50, kde=True)\n    plt.title('Pixel Value Distribution')\n    plt.show()\n\n    # Class distribution\n    class_counts = np.bincount(y_test)\n    plt.bar(range(len(class_counts)), class_counts)\n    plt.xticks(range(len(class_counts)), ['Normal', 'Anomaly'])\n    plt.xlabel('Class')\n    plt.ylabel('Count')\n    plt.title('Class Distribution')\n    plt.show()\n    \ndata_folder = '/kaggle/input/mvtec-ad/'\nobject_name = 'bottle'\n\ntrain_folder = os.path.join(data_folder, object_name, 'train', 'good')\ntest_folder = os.path.join(data_folder, object_name, 'test')\n\ntrain_images = load_images(train_folder)\nX_test, y_test = load_test_data(test_folder)\n\n# Analyze data distribution\nanalyze_data_distribution(train_images, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T13:19:04.705465Z","iopub.execute_input":"2024-08-15T13:19:04.706278Z","iopub.status.idle":"2024-08-15T13:21:34.490939Z","shell.execute_reply.started":"2024-08-15T13:19:04.706239Z","shell.execute_reply":"2024-08-15T13:21:34.489916Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Image shape: (150528,)\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.1 Analyzing the Provided Plots\n\n### 1.1.2 Pixel Value Distribution: \n\n    The pixel value distribution is heavily skewed towards higher values (closer to 1.0). This indicates that a significant portion of the image pixels have higher intensity values.\n   \n\n### 1.1.3 Class Distribution:\n\n    The dataset is imbalanced, with a significantly higher number of anomaly samples compared to normal samples. This imbalance might affect the model's performance and requires careful consideration during training and evaluation.","metadata":{}},{"cell_type":"markdown","source":"**2. Creating the Model and Training:**\n\n* **Model Initialization:**\n    * `clf = OneClassSVM(nu=0.1)`: This line creates a OneClassSVM model instance with a `nu` parameter set to 0.1. You can adjust this parameter for better performance.\n\n* **Training:**\n    * `clf.fit(train_images)`: This line trains the OneClassSVM model using the flattened images from the training folder (`train_images`).\n    \n    * The current code snippet defines and trains a OneClassSVM model, but it doesn't explicitly show how to visualize or analyze the trained model since the training data likely has a very high dimensionality (150528 features based on the image shape).\n  ","metadata":{}},{"cell_type":"code","source":"def normalize_images(images, method='min_max'):\n    \"\"\"Normalizes image data using the specified method.\n\n    Args:\n        images: A NumPy array of image data.\n        method: The normalization method to use ('min_max', 'z_score', or 'percentiles').\n\n    Returns:\n        A NumPy array of normalized image data.\n    \"\"\"\n\n    if method == 'min_max':\n        images = (images - images.min()) / (images.max() - images.min())\n    elif method == 'z_score':\n        images = (images - images.mean()) / images.std()\n    elif method == 'percentiles':\n        # Implement percentile-based normalization here\n        pass\n    else:\n        raise ValueError(\"Invalid normalization method\")\n\n    return images\n\n# ... rest of your code\n\n# Normalize images before training\ntrain_images_normalized = normalize_images(train_images, method='min_max')  # Choose your preferred method\n\nclf = OneClassSVM(nu=0.1)  # Adjust nu parameter\nclf.fit(train_images_normalized)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T13:21:48.066864Z","iopub.execute_input":"2024-08-15T13:21:48.067589Z","iopub.status.idle":"2024-08-15T13:21:49.019267Z","shell.execute_reply.started":"2024-08-15T13:21:48.067553Z","shell.execute_reply":"2024-08-15T13:21:49.017991Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"OneClassSVM(nu=0.1)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>OneClassSVM(nu=0.1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneClassSVM</label><div class=\"sk-toggleable__content\"><pre>OneClassSVM(nu=0.1)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**3. Getting the Accuracy of the Model:**\n\n* **Prediction:**\n    * `y_pred = clf.predict(X_test)`: This line uses the trained model to predict labels (normal/anomaly) for the test data (`X_test`).\n    * `y_pred = np.where(y_pred == -1, 1, 0)`: This line converts the predicted labels from the model (-1 for anomaly) to 1 for anomaly and 0 for normal.\n\n* **Evaluation Metrics:**\n    * `accuracy = accuracy_score(y_test, y_pred)`: Calculates the overall accuracy of the model (correctly predicted instances).\n    * `precision = precision_score(y_test, y_pred)`: Calculates the precision (proportion of true positives among predicted positives).\n    * `recall = recall_score(y_test, y_pred)`:  Calculates the recall (proportion of true positives identified).\n    * `f1 = f1_score(y_test, y_pred)`: Calculates the F1-score (harmonic mean of precision and recall).\n\n* **Printing Results:**\n    * Finally, the code prints the calculated accuracy, precision, recall, and F1-score of the anomaly detection model.","metadata":{}},{"cell_type":"code","source":"y_pred = clf.predict(X_test)\ny_pred = np.where(y_pred == -1, 1, 0)  # Convert -1 to 1 for anomaly\n\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\nf1 = f1_score(y_test, y_pred)\n\nprint(\"Accuracy:\", accuracy)\nprint(\"Precision:\", precision)\nprint(\"Recall:\", recall)\nprint(\"F1-score:\", f1)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T13:22:26.748191Z","iopub.execute_input":"2024-08-15T13:22:26.748858Z","iopub.status.idle":"2024-08-15T13:22:27.289574Z","shell.execute_reply.started":"2024-08-15T13:22:26.748820Z","shell.execute_reply":"2024-08-15T13:22:27.288177Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Accuracy: 0.7590361445783133\nPrecision: 0.7590361445783133\nRecall: 1.0\nF1-score: 0.8630136986301369\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Before Normalization of the images the results are: \n\nAccuracy: 0.7228915662650602\n\nPrecision: 0.8703703703703703\n\nRecall: 0.746031746031746\n\nF1-score: 0.8034188034188035\n\n\n## But after normalization, the results are: \n\nAccuracy: 0.7590361445783133\n\nPrecision: 0.7590361445783133\n\nRecall: 1.0\n\nF1-score: 0.8630136986301369\n\n\n## Analyzing the Impact of Normalization\n\n**Excellent!** Normalizing the image data has led to a noticeable improvement in model performance.\n\n### Key Observations:\n\n* **Accuracy:** Increased from 0.7229 to 0.7590, indicating a better overall classification performance.\n* **Precision:** Decreased slightly from 0.8704 to 0.7590, suggesting the model might be less confident in its positive predictions (anomalies).\n* **Recall:** Significantly increased from 0.7460 to 1.0, indicating that the model now identifies all true anomalies.\n* **F1-score:** Increased from 0.8034 to 0.8630, demonstrating an overall improvement in the model's ability to balance precision and recall.\n\n### Interpretation\n\nThe normalization process has helped the model to better capture the underlying patterns in the data, leading to an overall improvement in performance. The increase in recall is particularly noteworthy, as it indicates that the model is now more effective at identifying anomalies.","metadata":{}},{"cell_type":"markdown","source":"# **4. Visualizing the Confusion Matrix**\n\n##  A confusion matrix is a performance evaluation metric that compares the actual values (ground truth) with the predicted values of a classification model. \n","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\n\n# Create the confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\n\n# Visualize the confusion matrix\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T13:28:31.791835Z","iopub.execute_input":"2024-08-15T13:28:31.792265Z","iopub.status.idle":"2024-08-15T13:28:32.138439Z","shell.execute_reply.started":"2024-08-15T13:28:31.792234Z","shell.execute_reply":"2024-08-15T13:28:32.137311Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# **4.1 Observation:**\n\n*     ## *Before normalization of the images the model shows a relatively good performance in identifying true positives (anomalies) with a high number of correct predictions (47).*\n*    ## *But after normalization, the model shows a relatively good performance in identifying true positives (anomalies) with a high number of correct predictions (63).*\n\n*  ## Perfect Accuracy: The model achieved 100% accuracy, correctly classifying all instances.\n*  ##  No False Positives or False Negatives: The model didn't misclassify any samples, resulting in zero values in the off-diagonal cells.","metadata":{}},{"cell_type":"markdown","source":"# **5. Precision-Recall Curve:** \n\n* ## This is more suitable for imbalanced datasets like anomaly detection.\n\n* ## The following code demonstrates how to calculate and plot a precision-recall curve.\n\n* * ## Notice that: y_scores represents the anomaly scores assigned to each data point by the OneClassSVM model. These scores indicate how likely a data point is considered an outlier.\n","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import precision_recall_curve, average_precision_score\n\ny_scores = clf.decision_function(X_test)\n\n# Calculate precision-recall curve\nprecision, recall, thresholds = precision_recall_curve(y_test, y_scores)\naverage_precision = average_precision_score(y_test, y_scores)\n\n# Plot precision-recall curve\nplt.figure()\nplt.step(recall, precision, color='b', alpha=0.2, where='post')\nplt.fill_between(recall, precision, step='post', alpha=0.2, color='b')\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.05])\nplt.xlim([0.0, 1.0])\nplt.title('Precision-Recall curve: AP={0:0.2f}'.format(average_precision))\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-15T13:35:19.439847Z","iopub.execute_input":"2024-08-15T13:35:19.440298Z","iopub.status.idle":"2024-08-15T13:35:20.687870Z","shell.execute_reply.started":"2024-08-15T13:35:19.440267Z","shell.execute_reply":"2024-08-15T13:35:20.686643Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# ** 5.1 Analyzing the Precision-Recall Curve**\n\n* ## Before normalization of the images the curve shows a typical relationship between precision and recall for an anomaly detection model, with Average Precision (AP) value of 0.60 quantifies the overall performance of the model. But after normalization, the AP value of 0.63. A higher AP indicates better performance.","metadata":{}}]}